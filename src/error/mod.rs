//! Error related business logic of `febft`.
//!
//! Contains the `ErrorKind` enum generated by the `build.rs` build
//! script, as well as other useful extensions of the `std::result::Result`
//! type, to work with our very own `Error` type.

#[macro_export]
macro_rules! Err {
    ($err:expr $(,)?) => {{
        Err(From::from($err))
    }};
}

///
#[macro_export]
macro_rules! quiet_unwrap {
    ($err:expr) => {
        match $err {
            Ok(value) => value,
            Err(err) => {
                error!("{} ({:?})", err, err);

                return;
            }
        };
    };
    ($err:expr, $ret:expr) => {
        match $err {
            Ok(value) => value,
            Err(err) => {
                error!("{} ({:?})", err, err);

                return $ret;
            }
        };
    };
}

/// Wrapper result type for `std::result::Result`.
pub type Result<T> = anyhow::Result<T>;
